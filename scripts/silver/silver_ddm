create or replace procedure silver.load_silver ()
language plpgsql
as $$
declare
    rows_loaded BIGINT;
    start_time TIMESTAMP;
    end_time   TIMESTAMP;
    elapsed    INTERVAL;
    elapsed_sec BIGINT;
begin
    RAISE NOTICE '--------------------------------%Loading Silver layer', chr(10);
    RAISE NOTICE '--------------------------------';
    RAISE NOTICE '>> Loading CRM Tables';

    -------------------------------------------------------------------------
    -- silver.source_crm_cust_info
    start_time := current_timestamp;

    TRUNCATE silver.source_crm_cust_info;

    INSERT INTO silver.source_crm_cust_info (
        cst_id,
        cst_key,
        cst_firstname,
        cst_lastname,
        cst_marital_status,
        cst_gndr,
        cst_create_date
    )
    SELECT
        cst_id,
        cst_key,
        trim(cst_firstname) AS cst_firstname,
        trim(cst_lastname)  AS cst_lastname,
        CASE UPPER(cst_marital_status)
            WHEN 'S' THEN 'Single'
            WHEN 'M' THEN 'Married'
            ELSE 'n/a'
        END AS cst_marital_status,
        CASE UPPER(cst_gndr)
            WHEN 'F' THEN 'Female'
            WHEN 'M' THEN 'Male'
            ELSE 'n/a'
        END AS cst_gndr,
        cst_create_date
    FROM (
        SELECT *,
               row_number() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
        FROM bronze.source_crm_cust_info
    ) AS t
    WHERE flag_last = 1
      AND cst_id IS NOT NULL;

    GET DIAGNOSTICS rows_loaded = ROW_COUNT;
    end_time   := current_timestamp;
    elapsed    := end_time - start_time;
    elapsed_sec := EXTRACT(EPOCH FROM elapsed)::bigint;

    RAISE NOTICE 'Loaded % rows into silver.source_crm_cust_info', rows_loaded;
    RAISE NOTICE '>> Load duration: % (≈ % seconds)', elapsed, elapsed_sec;

    -------------------------------------------------------------------------
    -- silver.source_crm_prd_info
    start_time := current_timestamp;

    TRUNCATE silver.source_crm_prd_info;

    INSERT INTO silver.source_crm_prd_info (
        prd_id,
        cat_id,
        prd_key,
        prd_nm,
        prd_cost,
        prd_line,
        prd_start_dt,
        prd_end_dt
    )
    SELECT
        prd_id,
        replace(substr(prd_key, 1, 5), '-', '_') AS cat_id,
        substr(prd_key, 7)                        AS prd_key,
        prd_nm,
        COALESCE(prd_cost, 0)                     AS prd_cost,
        CASE UPPER(TRIM(prd_line))
            WHEN 'M' THEN 'Mountain'
            WHEN 'R' THEN 'Road'
            WHEN 'S' THEN 'Other Sales'
            WHEN 'T' THEN 'Touring'
            ELSE 'n/a'
        END AS prd_line,
        CAST(prd_start_dt AS DATE) AS prd_start_dt,
        CAST(lead(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt
    FROM bronze.source_crm_prd_info;

    GET DIAGNOSTICS rows_loaded = ROW_COUNT;
    end_time   := current_timestamp;
    elapsed    := end_time - start_time;
    elapsed_sec := EXTRACT(EPOCH FROM elapsed)::bigint;

    RAISE NOTICE 'Loaded % rows into silver.source_crm_prd_info', rows_loaded;
    RAISE NOTICE '>> Load duration: % (≈ % seconds)', elapsed, elapsed_sec;

    -------------------------------------------------------------------------
    -- silver.source_crm_sales_details
    start_time := current_timestamp;

    TRUNCATE silver.source_crm_sales_details;

    INSERT INTO silver.source_crm_sales_details (
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        sls_order_dt,
        sls_ship_dt,
        sls_due_dt,
        sls_sales,
        sls_quantity,
        sls_price
    )
    SELECT
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        CASE WHEN sls_order_dt = 0 OR length(CAST(sls_order_dt AS TEXT)) <> 8 THEN NULL
             ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
        END AS sls_order_dt,
        CASE WHEN sls_ship_dt  = 0 OR length(CAST(sls_ship_dt  AS TEXT)) <> 8 THEN NULL
             ELSE CAST(CAST(sls_ship_dt  AS VARCHAR) AS DATE)
        END AS sls_ship_dt,
        CASE WHEN sls_due_dt   = 0 OR length(CAST(sls_due_dt   AS TEXT)) <> 8 THEN NULL
             ELSE CAST(CAST(sls_due_dt   AS VARCHAR) AS DATE)
        END AS sls_due_dt,
        CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales <> sls_quantity * ABS(sls_price)
             THEN sls_quantity * ABS(sls_price)
             ELSE sls_sales
        END AS sls_sales,
        sls_quantity,
        CASE WHEN sls_price IS NULL OR sls_price <= 0
             THEN sls_sales / NULLIF(sls_quantity, 0)
             ELSE sls_price
        END AS sls_price
    FROM bronze.source_crm_sales_details;

    GET DIAGNOSTICS rows_loaded = ROW_COUNT;
    end_time   := current_timestamp;
    elapsed    := end_time - start_time;
    elapsed_sec := EXTRACT(EPOCH FROM elapsed)::bigint;

    RAISE NOTICE 'Loaded % rows into silver.source_crm_sales_details', rows_loaded;
    RAISE NOTICE '>> Load duration: % (≈ % seconds)', elapsed, elapsed_sec;

    -------------------------------------------------------------------------
    -- silver.source_erp_cust_az12
    start_time := current_timestamp;

    TRUNCATE silver.source_erp_cust_az12;

    INSERT INTO silver.source_erp_cust_az12 (
        cid,
        bdate,
        gen
    )
    SELECT
        CASE WHEN cid LIKE 'NAS%' THEN substr(cid, 4) ELSE cid END AS cid,
        CASE WHEN bdate > current_date THEN NULL ELSE bdate END AS bdate,
        CASE WHEN upper(trim(gen)) IN ('F','FEMALE') THEN 'Female'
             WHEN upper(trim(gen)) IN ('M','MALE')  THEN 'Male'
             ELSE 'n/a'
        END AS gen
    FROM bronze.source_erp_cust_az12;

    GET DIAGNOSTICS rows_loaded = ROW_COUNT;
    end_time   := current_timestamp;
    elapsed    := end_time - start_time;
    elapsed_sec := EXTRACT(EPOCH FROM elapsed)::bigint;

    RAISE NOTICE 'Loaded % rows into silver.source_erp_cust_az12', rows_loaded;
    RAISE NOTICE '>> Load duration: % (≈ % seconds)', elapsed, elapsed_sec;

    -------------------------------------------------------------------------
    -- silver.source_erp_loc_a101
    start_time := current_timestamp;

    TRUNCATE silver.source_erp_loc_a101;

    INSERT INTO silver.source_erp_loc_a101 (
        cid,
        cntry
    )
    SELECT
        replace(cid, '-', '') AS cid,
        CASE
            WHEN trim(cntry) = 'DE'              THEN 'Germany'
            WHEN trim(cntry) IN ('US','USA')     THEN 'United States'
            WHEN trim(cntry) = '' OR cntry IS NULL THEN 'n/a'
            ELSE trim(cntry)
        END AS cntry
    FROM bronze.source_erp_loc_a101;

    GET DIAGNOSTICS rows_loaded = ROW_COUNT;
    end_time   := current_timestamp;
    elapsed    := end_time - start_time;
    elapsed_sec := EXTRACT(EPOCH FROM elapsed)::bigint;

    RAISE NOTICE 'Loaded % rows into silver.source_erp_loc_a101', rows_loaded;
    RAISE NOTICE '>> Load duration: % (≈ % seconds)', elapsed, elapsed_sec;

    -------------------------------------------------------------------------
    -- silver.source_erp_px_cat_g1v2
    start_time := current_timestamp;

    TRUNCATE silver.source_erp_px_cat_g1v2;

    INSERT INTO silver.source_erp_px_cat_g1v2 (
        id,
        cat,
        subcat,
        maintenance
    )
    SELECT
        id,
        cat,
        subcat,
        maintenance
    FROM bronze.source_erp_px_cat_g1v2;

    GET DIAGNOSTICS rows_loaded = ROW_COUNT;
    end_time   := current_timestamp;
    elapsed    := end_time - start_time;
    elapsed_sec := EXTRACT(EPOCH FROM elapsed)::bigint;

    RAISE NOTICE 'Loaded % rows into silver.source_erp_px_cat_g1v2', rows_loaded;
    RAISE NOTICE '>> Load duration: % (≈ % seconds)', elapsed, elapsed_sec;

end;
$$;
